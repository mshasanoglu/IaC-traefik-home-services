##############################
########## services ##########
##############################
services:
#############################
############ vpn ############
#############################
  vpn:
    profiles:
      - $WIREGUARD_PROFILE_NAME
    image: lscr.io/linuxserver/wireguard:${WIREGUARD_VERSION}
    container_name: wireguard--${WIREGUARD_VERSION}
    restart: unless-stopped
    networks:
      - nw-traefik
    dns:
      - 1.1.1.1
      - 1.0.0.1
    ports:
      - ${WIREGUARD_SERVERPORT:-51820}:51820/udp
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      net.ipv4.conf.all.src_valid_mark: 1
    healthcheck:
      test: wg show 2>&1 | grep 'listening port.*51820' || exit 1
      interval: ${HEALTHCHECK_INTERVAL:-30s}
      timeout: ${HEALTHCHECK_TIMEOUT:-30s}
    volumes:
      - /lib/modules:/lib/modules
      - $DATA_PATH/vpn:/config
    environment:
      # DYNAMIC
      TZ: ${TZ}
      PUID: ${PUID}
      PGID: ${PGID}
      SERVERURL: ${DOMAIN}
      SERVERPORT: ${WIREGUARD_SERVERPORT}
      PEERS: ${WIREGUARD_PEERS}
      PEERDNS: ${WIREGUARD_PEERDNS}
      INTERNAL_SUBNET: ${WIREGUARD_INTERNAL_SUBNET}


#############################
########## traefik ##########
#############################
  traefik:
    image: traefik:${TRAEFIK_VERSION}
    container_name: traefik--${TRAEFIK_VERSION}
    restart: unless-stopped
    command:
      --global.checknewversion=true
      --global.sendanonymoususage=false
      --entrypoints.web.address=:80
      --entrypoints.web.http.redirections.entrypoint.to=websecure
      --entrypoints.web.http.redirections.entrypoint.scheme=https
      --entrypoints.websecure.address=:443
      --entrypoints.traefik.address=:${TRAEFIK_WEB_PORT}
      --certificatesresolvers.prod.acme.email=${SMTP_NAME}
      --certificatesresolvers.prod.acme.storage=/ssl-certs/acme.json
      --certificatesresolvers.prod.acme.caserver=https://acme-v02.api.letsencrypt.org/directory
      --certificatesresolvers.prod.acme.httpchallenge.entrypoint=web
      --certificatesresolvers.staging.acme.email=${SMTP_NAME}
      --certificatesresolvers.staging.acme.storage=/ssl-certs/acme-staging.json
      --certificatesresolvers.staging.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
      --certificatesresolvers.staging.acme.httpchallenge.entrypoint=web
      --api.insecure=true
      --ping=true
      --providers.docker.exposedbydefault=false
      --providers.file.directory=/etc/traefik/dynamic-conf
    networks:
      - nw-traefik
    dns:
      - 1.1.1.1
      - 1.0.0.1
    extra_hosts:
      - host.docker.internal:${HOST_IP}
    ports:
      # The HTTP port
      - 80:80/tcp
      # The HTTPS port
      - 443:443/tcp
      # The Web UI (enabled by --api.insecure=true)
      - ${TRAEFIK_WEB_PORT}:${TRAEFIK_WEB_PORT}/tcp
    healthcheck:
      test: wget -q --spider http://localhost:${TRAEFIK_WEB_PORT}/ping
      interval: ${HEALTHCHECK_INTERVAL:-30s}
      timeout: ${HEALTHCHECK_TIMEOUT:-30s}
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      # Traefik dynamic configuration
      - ./config/traefik/dynamic-conf:/etc/traefik/dynamic-conf
      # Traefik ssl certs 
      - $DATA_PATH/ssl-certs:/ssl-certs
    environment:
      # DYNAMIC
      TZ: ${TZ}
    labels:
      traefik.enable: true
      # ROUTERS
      traefik.http.routers.traefik.tls: true
      traefik.http.routers.traefik.tls.certresolver: ${ENV}
      traefik.http.routers.traefik.rule: "Host(`${TRAEFIK_ALIAS}.${DOMAIN}`)"
      traefik.http.routers.traefik.middlewares: "traefik-auth"
      # SERVICES
      traefik.http.services.traefik.loadbalancer.server.port: ${TRAEFIK_WEB_PORT}
      # MIDDLEWARES
      traefik.http.middlewares.traefik-auth.basicauth.users: ${BASIC_AUTH_CREDS:-}


#############################
######## whoami-app #########
#############################
  whoami-app:
    # A container that exposes an API to show its IP address
    profiles:
      - $WHOAMI_PROFILE_NAME
    image: traefik/whoami/modified:${WHOAMI_VERSION}
    build:
      context: .
      dockerfile_inline: |
        FROM busybox:latest AS builder
        FROM traefik/whoami:${WHOAMI_VERSION}
        COPY --from=builder / /
    container_name: whoami--${WHOAMI_VERSION}
    restart: unless-stopped
    networks:
      - nw-traefik
    dns:
      - 1.1.1.1
      - 1.0.0.1
    depends_on:
      traefik:
        condition: service_healthy
    healthcheck:
      test: wget -q --spider http://localhost/health
      interval: ${HEALTHCHECK_INTERVAL:-30s}
      timeout: ${HEALTHCHECK_TIMEOUT:-30s}
    environment:
      # DYNAMIC
      TZ: ${TZ}
    labels:
      traefik.enable: true
      # ROUTERS
      traefik.http.routers.whoami-app.tls: true
      traefik.http.routers.whoami-app.tls.certresolver: ${ENV}
      traefik.http.routers.whoami-app.rule: "Host(`${WHOAMI_ALIAS}.${DOMAIN}`)"


#############################
######## vs-code-app ########
#############################
  vs-code-app:
    profiles:
      - $VS_CODE_PROFILE_NAME
    image: lscr.io/linuxserver/code-server:${VS_CODE_VERSION}
    container_name: code-server--${VS_CODE_VERSION}
    restart: unless-stopped
    networks:
      - nw-traefik
    dns:
      - 1.1.1.1
      - 1.0.0.1
    depends_on:
      traefik:
        condition: service_healthy
    healthcheck:
      test: curl -f http://localhost:8443/healthz
      interval: ${HEALTHCHECK_INTERVAL:-30s}
      timeout: ${HEALTHCHECK_TIMEOUT:-30s}
    volumes:
      - $DATA_PATH/vs-code-app:/config
    environment:
      TZ: ${TZ}
      PUID: ${PUID}
      PGID: ${PGID}
      PASSWORD: ${VS_CODE_PASSWORD}
      SUDO_PASSWORD: ${VS_CODE_SUDO_PASSWORD}
      PROXY_DOMAIN: ${VS_CODE_ALIAS}.${DOMAIN}
      DEFAULT_WORKSPACE: /config/workspace
    labels:
      traefik.enable: true
      # ROUTERS
      traefik.http.routers.vs-code-app.tls: true
      traefik.http.routers.vs-code-app.tls.certresolver: ${ENV}
      traefik.http.routers.vs-code-app.rule: "Host(`${VS_CODE_ALIAS}.${DOMAIN}`)"


#############################
######## pihole-app #########
#############################
  pihole-app:
    profiles:
      - $PIHOLE_PROFILE_NAME
    image: pihole/pihole:${PIHOLE_VERSION}
    container_name: pihole--${PIHOLE_VERSION}
    restart: unless-stopped
    network_mode: host
    cap_add:
      - NET_ADMIN
    depends_on:
      traefik:
        condition: service_healthy
    healthcheck:
      interval: ${HEALTHCHECK_INTERVAL:-30s}
      timeout: ${HEALTHCHECK_TIMEOUT:-30s}
    volumes:
      - $DATA_PATH/pihole-app/etc-pihole:/etc/pihole
      - $DATA_PATH/pihole-app/etc-dnsmasq.d:/etc/dnsmasq.d
    environment:
      # DYNAMIC
      TZ: ${TZ}
      FTLCONF_webserver_api_password: ${PIHOLE_PASSWORD}
      FTLCONF_dns_upstreams: ${PIHOLE_DNS_UPSTREAMS}
      FTLCONF_dns_revServers: ${PIHOLE_DNS_REV_SERVERS}
      FTLCONF_dns_domain: ${PIHOLE_DNS_DOMAIN}
      FTLCONF_dns_interface: ${PIHOLE_DNS_INTERFACE}
      FTLCONF_dns_listeningMode: ${PIHOLE_DNS_LISTENING_MODE}
      FTLCONF_dhcp_active: ${PIHOLE_DHCP_ACTIVE}
      FTLCONF_dhcp_start: ${PIHOLE_DHCP_START}
      FTLCONF_dhcp_end: ${PIHOLE_DHCP_END}
      FTLCONF_dhcp_router: ${PIHOLE_DHCP_ROUTER}
      FTLCONF_dhcp_leaseTime: ${PIHOLE_DHCP_LEASETIME}
      FTLCONF_dhcp_rapidCommit: ${PIHOLE_DHCP_RAPID_COMMIT}
      FTLCONF_dhcp_ipv6: ${PIHOLE_DHCP_IPV6}
      FTLCONF_webserver_interface_theme: ${PIHOLE_WEB_THEME}
      FTLCONF_webserver_port: ${PIHOLE_WEB_PORT}
    labels:
      traefik.enable: true
      # ROUTERS
      traefik.http.routers.pihole-app.tls: true
      traefik.http.routers.pihole-app.tls.certresolver: ${ENV}
      traefik.http.routers.pihole-app.rule: "Host(`${PIHOLE_ALIAS}.${DOMAIN}`)"
      traefik.http.routers.pihole-app.middlewares: "pihole-app-redirectregex"
      # SERVICES
      traefik.http.services.pihole-app.loadbalancer.server.port: ${PIHOLE_WEB_PORT}
      # MIDDLEWARES
      traefik.http.middlewares.pihole-app-redirectregex.redirectregex.permanent: true
      traefik.http.middlewares.pihole-app-redirectregex.redirectregex.regex: "^https?://([^/]+)/?$"
      traefik.http.middlewares.pihole-app-redirectregex.redirectregex.replacement: "https://$${1}/admin"


#############################
########## matter ###########
#############################
  matter:
    profiles:
      - $MATTER_PROFILE_NAME
    image: ghcr.io/home-assistant-libs/python-matter-server:${MATTER_VERSION}
    container_name: matter--${MATTER_VERSION}
    restart: unless-stopped
    network_mode: host
    depends_on:
      traefik:
        condition: service_healthy
    healthcheck:
      test:  curl -f http://localhost:5580
      interval: ${HEALTHCHECK_INTERVAL:-30s}
      timeout: ${HEALTHCHECK_TIMEOUT:-30s}
    security_opt:
      - apparmor:unconfined
    volumes:
      - $DATA_PATH/matter:/data


#############################
########### mqtt ############
#############################
  mqtt:
    profiles:
      - $MQTT_PROFILE_NAME
    image: eclipse-mosquitto:${MQTT_VERSION}
    container_name: mqtt--${MQTT_VERSION}
    restart: unless-stopped
    network_mode: host
    depends_on:
      traefik:
        condition: service_healthy
    volumes:
      - $DATA_PATH/mqtt/config:/mosquitto/config
      - $DATA_PATH/mqtt/data:/mosquitto/data
      - $DATA_PATH/mqtt/log:/mosquitto/log
      - ./config/mqtt/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro


#############################
##### growatt-noah-mqtt #####
#############################
  growatt-noah-mqtt:
    profiles:
      - $GROWATT_NOAH_MQTT_PROFILE_NAME
    image: ghcr.io/mtrossbach/noah-mqtt:${GROWATT_NOAH_MQTT_VERSION}
    container_name: growatt-noah-mqtt--${GROWATT_NOAH_MQTT_VERSION}
    restart: unless-stopped
    networks:
      - nw-traefik
    dns:
      - 1.1.1.1
      - 1.0.0.1
    depends_on:
      traefik:
        condition: service_healthy
      mqtt:
        condition: service_started
    environment:
      # STATIC
      MQTT_PORT: 1883
      GROWATT_API_MODE: app
      # DYNAMIC
      MQTT_HOST: ${HOST_IP}
      GROWATT_USERNAME: ${GROWATT_NOAH_MQTT_GROWATT_USERNAME}
      GROWATT_PASSWORD: ${GROWATT_NOAH_MQTT_GROWATT_PASSWORD}


#############################
##### eufy-security-ws ######
#############################
  eufy-security-ws:
    profiles:
      - $EUFY_SECURITY_WS_PROFILE_NAME
    image: bropat/eufy-security-ws:${EUFY_SECURITY_WS_VERSION}
    container_name: eufy-security-ws--${EUFY_SECURITY_WS_VERSION}
    restart: unless-stopped
    network_mode: host
    depends_on:
      traefik:
        condition: service_healthy
    volumes:
      - $DATA_PATH/eufy-security-ws/data:/data
    environment:
      # DYNAMIC
      TZ: ${TZ}
      USERNAME: ${EUFY_SECURITY_WS_USERNAME}
      PASSWORD: ${EUFY_SECURITY_WS_PASSWORD}
      COUNTRY: ${EUFY_SECURITY_WS_COUNTRY}
      TRUSTED_DEVICE_NAME: ${EUFY_SECURITY_WS_TRUSTED_DEVICE_NAME}


#############################
####### smarthome-app #######
#############################
  smarthome-app:
    profiles:
      - $HOMEASSISTANT_PROFILE_NAME
    image: homeassistant/home-assistant:${HOMEASSISTANT_VERSION}
    container_name: homeassistant--${HOMEASSISTANT_VERSION}
    restart: unless-stopped
    privileged: true
    network_mode: host
    depends_on:
      matter:
        condition: service_healthy      
    healthcheck:
      test: curl -f http://localhost:8123
      interval: ${HEALTHCHECK_INTERVAL:-30s}
      timeout: ${HEALTHCHECK_TIMEOUT:-30s}
    volumes:
      - $DATA_PATH/smarthome-app:/config
      - /etc/localtime:/etc/localtime:ro
      - /run/dbus:/run/dbus:ro
    environment:
      # DYNAMIC
      TZ: ${TZ}
    labels:
      traefik.enable: true
      # ROUTERS
      traefik.http.routers.smarthome-app.tls: true
      traefik.http.routers.smarthome-app.tls.certresolver: ${ENV}
      traefik.http.routers.smarthome-app.rule: "Host(`${HOMEASSISTANT_ALIAS}.${DOMAIN}`)"
      # SERVICES
      traefik.http.services.smarthome-app.loadbalancer.server.port: ${HOMEASSISTANT_ADMINPORT}
      

#############################
############ db #############
#############################
  db:
    profiles:
      - $MYSQL_PROFILE_NAME
    image: mariadb:${MYSQL_VERSION}
    container_name: mariadb--${MYSQL_VERSION}
    restart: unless-stopped
    command: 
      --transaction-isolation=READ-COMMITTED
      --binlog-format=ROW
    networks:
      - nw-traefik
    dns:
      - 1.1.1.1
      - 1.0.0.1
    depends_on:
      traefik:
        condition: service_healthy
    healthcheck:
      test: healthcheck.sh --connect --innodb_initialized
      interval: ${HEALTHCHECK_INTERVAL:-30s}
      timeout: ${HEALTHCHECK_TIMEOUT:-30s}
    volumes:
      - $DATA_PATH/db/init:/docker-entrypoint-initdb.d
      - $DATA_PATH/db/mysql:/var/lib/mysql
    environment:
      # DYNAMIC
      TZ: ${TZ}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}


#############################
########## db-app ###########
#############################
  db-app:
    profiles:
      - $MYSQL_PROFILE_NAME
    image: adminer/modified:${ADMINER_VERSION}
    build:
      context: .
      dockerfile_inline: |
        FROM debian:bullseye-slim AS builder
        RUN apt update && apt install -y curl && rm -rf /var/lib/apt/lists/*
        FROM adminer:${ADMINER_VERSION}
        COPY --from=builder /usr/bin/curl /usr/bin/curl
        COPY --from=builder /usr/lib/aarch64-linux-gnu/* /usr/lib/aarch64-linux-gnu/
    container_name: adminer--${ADMINER_VERSION}
    restart: unless-stopped
    networks:
      - nw-traefik
    dns:
      - 1.1.1.1
      - 1.0.0.1
    ports:
      - ${ADMINER_PORT:-8080}:8080/tcp
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: curl -f http://localhost:8080
      interval: ${HEALTHCHECK_INTERVAL:-30s}
      timeout: ${HEALTHCHECK_TIMEOUT:-30s}
    environment:
      # DYNAMIC
      TZ: ${TZ}


#############################
####### in-memory-db ########
#############################
  in-memory-db:
    profiles:
      - $MYSQL_PROFILE_NAME
    image: redis:${REDIS_VERSION}
    container_name: redis--${REDIS_VERSION}
    restart: unless-stopped
    command: redis-server --port ${REDIS_HOST_PORT}
    networks:
      - nw-traefik
    dns:
      - 1.1.1.1
      - 1.0.0.1
    depends_on:
      traefik:
        condition: service_healthy
    healthcheck:
      test: redis-cli -p ${REDIS_HOST_PORT} ping
      interval: ${HEALTHCHECK_INTERVAL:-30s}
      timeout: ${HEALTHCHECK_TIMEOUT:-30s}
    volumes:
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf
      - $DATA_PATH/in-memory-db:/data
    environment:
      # DYNAMIC
      TZ: ${TZ}


#############################
######### cloud-app #########
#############################
  cloud-app:
    profiles:
      - $NEXTCLOUD_PROFILE_NAME
    image: nextcloud:${NEXTCLOUD_VERSION}
    container_name: nextcloud--${NEXTCLOUD_VERSION}
    restart: unless-stopped
    command: /bin/bash -c '${NEXTCLOUD_STARTUP_CMD}'
    networks:
      - nw-traefik
    dns:
      - 1.1.1.1
      - 1.0.0.1
    depends_on:
      db:
        condition: service_healthy
      in-memory-db:
        condition: service_healthy
    healthcheck:
      test: curl -s http://localhost/status.php | grep '"installed":true' || exit 1
      interval: ${HEALTHCHECK_INTERVAL:-30s}
      timeout: ${HEALTHCHECK_TIMEOUT:-30s}
      retries: 4
    volumes:
      - $DATA_PATH/cloud-app/html:/var/www/html
      - $DATA_PATH/cloud-app/custom_apps:/var/www/html/custom_apps
      - $DATA_PATH/cloud-app/config:/var/www/html/config
      - $DATA_PATH/cloud-app/data:/var/www/html/data
      - $DATA_PATH/cloud-app/cache:/var/cache
      - ./config/nextcloud/pre-installation:/docker-entrypoint-hooks.d/pre-installation
      - ./config/nextcloud/post-installation:/docker-entrypoint-hooks.d/post-installation
      - ./config/nextcloud/before-starting:/docker-entrypoint-hooks.d/before-starting
    environment:
      # STATIC
      MYSQL_HOST: db
      REDIS_HOST: in-memory-db
      APACHE_DISABLE_REWRITE_IP: 1
      TRUSTED_PROXIES: 10.0.0.0/8 172.16.0.0/12 192.168.0.0/16
      OVERWRITEWEBROOT: /
      # DYNAMIC
      TZ: ${TZ}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      REDIS_HOST_PORT: ${REDIS_HOST_PORT}
      SMTP_SECURE: ${SMTP_SECURE}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_AUTHTYPE: ${SMTP_AUTHTYPE}
      SMTP_NAME: ${SMTP_NAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      NEXTCLOUD_TRUSTED_DOMAINS: ${NEXTCLOUD_ALIAS}.${DOMAIN}
      OVERWRITEHOST: ${NEXTCLOUD_ALIAS}.${DOMAIN}
      OVERWRITEPROTOCOL: ${NEXTCLOUD_PROTOCOL}
      OVERWRITECLIURL: ${NEXTCLOUD_PROTOCOL}://${NEXTCLOUD_ALIAS}.${DOMAIN}
      MYSQL_DATABASE: ${NEXTCLOUD_DB}
      NEXTCLOUD_ADMIN_USER: ${NEXTCLOUD_ADMIN_USER}
      NEXTCLOUD_ADMIN_PASSWORD: ${NEXTCLOUD_ADMIN_PASSWORD}
      MAIL_FROM_ADDRESS: ${NEXTCLOUD_MAIL_FROM_ADDRESS}
      MAIL_DOMAIN: ${NEXTCLOUD_MAIL_DOMAIN}
      PHP_MEMORY_LIMIT: ${NEXTCLOUD_PHP_MEMORY_LIMIT}
      PHP_UPLOAD_LIMIT: ${NEXTCLOUD_PHP_UPLOAD_LIMIT}
      APACHE_BODY_LIMIT: ${NEXTCLOUD_APACHE_BODY_LIMIT}
      # NEXTCLOUD CONFIG
      NEXTCLOUD_CONFIG_ACTIVITY: ${NEXTCLOUD_CONFIG_ACTIVITY:-yes}
      NEXTCLOUD_CONFIG_CIRCLES: ${NEXTCLOUD_CONFIG_CIRCLES:-yes}
      NEXTCLOUD_CONFIG_COMMENTS: ${NEXTCLOUD_CONFIG_COMMENTS:-yes}
      NEXTCLOUD_CONFIG_DASHBOARD: ${NEXTCLOUD_CONFIG_DASHBOARD:-yes}
      NEXTCLOUD_CONFIG_FIRSTRUNWIZARD: ${NEXTCLOUD_CONFIG_FIRSTRUNWIZARD:-yes}
      NEXTCLOUD_CONFIG_PHOTOS: ${NEXTCLOUD_CONFIG_PHOTOS:-yes}
      NEXTCLOUD_CONFIG_RECOMMENDATIONS: ${NEXTCLOUD_CONFIG_RECOMMENDATIONS:-yes}
      NEXTCLOUD_CONFIG_USER_STATUS: ${NEXTCLOUD_CONFIG_USER_STATUS:-yes}
      NEXTCLOUD_CONFIG_WEATHER_STATUS: ${NEXTCLOUD_CONFIG_WEATHER_STATUS:-yes}
      NEXTCLOUD_CONFIG_DEFAULT_LANGUAGE: ${NEXTCLOUD_CONFIG_DEFAULT_LANGUAGE:-en}
      NEXTCLOUD_CONFIG_DEFAULT_LOCALE: ${NEXTCLOUD_CONFIG_DEFAULT_LOCALE:-en_US}
      NEXTCLOUD_CONFIG_DEFAULT_PHONE_REGION: ${NEXTCLOUD_CONFIG_DEFAULT_PHONE_REGION:-US}
      NEXTCLOUD_CONFIG_SKELETONDIRECTORY: ${NEXTCLOUD_CONFIG_SKELETONDIRECTORY:-core/skeleton}
      NEXTCLOUD_CONFIG_MAINTENANCE_WINDOW_START: ${NEXTCLOUD_CONFIG_MAINTENANCE_WINDOW_START:-1}
      NEXTCLOUD_CONFIG_WORKSPACE_AVAILABLE: ${NEXTCLOUD_CONFIG_WORKSPACE_AVAILABLE:-1}
    labels:
      traefik.enable: true
      # ROUTERS
      traefik.http.routers.cloud-app.tls: true
      traefik.http.routers.cloud-app.tls.certresolver: ${ENV}
      traefik.http.routers.cloud-app.rule: "Host(`${NEXTCLOUD_ALIAS}.${DOMAIN}`)"
      traefik.http.routers.cloud-app.middlewares: "cloud-app-headers,cloud-app-redirectregex"
      # MIDDLEWARES headers
      traefik.http.middlewares.cloud-app-headers.headers.customFrameOptionsValue: "ALLOW-FROM ${NEXTCLOUD_PROTOCOL}://${NEXTCLOUD_ALIAS}.${DOMAIN}"
      traefik.http.middlewares.cloud-app-headers.headers.customresponseheaders.X-Frame-Options: "SAMEORIGIN"
      traefik.http.middlewares.cloud-app-headers.headers.contentSecurityPolicy: "frame-ancestors 'self' ${NEXTCLOUD_ALIAS}.${DOMAIN}"
      traefik.http.middlewares.cloud-app-headers.headers.stsSeconds: "15552000"
      traefik.http.middlewares.cloud-app-headers.headers.stsPreload: true
      # MIDDLEWARES redirectregex
      traefik.http.middlewares.cloud-app-redirectregex.redirectregex.permanent: true
      traefik.http.middlewares.cloud-app-redirectregex.redirectregex.regex: "${NEXTCLOUD_PROTOCOL}://(.*)/.well-known/(card|cal)dav"
      traefik.http.middlewares.cloud-app-redirectregex.redirectregex.replacement: "${NEXTCLOUD_PROTOCOL}://$${1}/remote.php/dav/"


#############################
######### homepage ##########
#############################
  homepage:
    profiles:
      - $WORDPRESS_PROFILE_NAME
    image: wordpress:${WORDPRESS_VERSION}
    container_name: wordpress--${WORDPRESS_VERSION}
    restart: unless-stopped
    networks:
      - nw-traefik
    dns:
      - 1.1.1.1
      - 1.0.0.1
    depends_on:
      db:
        condition: service_healthy
      in-memory-db:
        condition: service_healthy
    healthcheck:
      test: curl -f http://localhost
      interval: ${HEALTHCHECK_INTERVAL:-30s}
      timeout: ${HEALTHCHECK_TIMEOUT:-30s}
    volumes:
      - $DATA_PATH/homepage:/var/www/html
    environment:
      # STATIC
      WORDPRESS_DB_HOST: db
      # DYNAMIC
      TZ: ${TZ}
      WORDPRESS_DB_USER: ${MYSQL_USER}
      WORDPRESS_DB_PASSWORD: ${MYSQL_PASSWORD}
      WORDPRESS_DB_NAME: ${WORDPRESS_DB}
    labels:
      traefik.enable: true
      # ROUTERS
      traefik.http.routers.homepage.tls: true
      traefik.http.routers.homepage.tls.certresolver: ${ENV}
      traefik.http.routers.homepage.rule: "Host(`${DOMAIN}`) || Host(`${WORDPRESS_ALIAS}.${DOMAIN}`)"


#############################
######### plex-app ##########
#############################
  plex-app:
    profiles:
      - $PLEX_PROFILE_NAME
    image: lscr.io/linuxserver/plex:${PLEX_VERSION}
    container_name: plex--${PLEX_VERSION}
    hostname: ${HOSTNAME}
    restart: unless-stopped
    networks:
      - nw-traefik
    dns:
      - 1.1.1.1
      - 1.0.0.1
    ports:
      - ${PLEX_PORT:-32400}:32400/tcp
    depends_on:
      cloud-app:
        condition: service_healthy
    healthcheck:
      test: curl -f http://localhost:32400/identity
      interval: ${HEALTHCHECK_INTERVAL:-30s}
      timeout: ${HEALTHCHECK_TIMEOUT:-30s}
    volumes:
      - $DATA_PATH/plex-app/config:/config
      - $DATA_PATH/plex-app/transcode-temp:/transcode
      - $DATA_PATH/$PLEX_DATA:/data
    environment:
      # STATIC
      VERSION: docker
      # DYNAMIC
      TZ: ${TZ}
      PUID: ${PUID}
      PGID: ${PGID}
      PLEX_CLAIM: ${PLEX_CLAIM}
      ADVERTISE_IP: http://${HOST_IP}:32400/
    labels:
      traefik.enable: true
      # ROUTERS
      traefik.http.routers.plex-app.tls: true
      traefik.http.routers.plex-app.tls.certresolver: ${ENV}
      traefik.http.routers.plex-app.rule: "Host(`${PLEX_ALIAS}.${DOMAIN}`)"
      # SERVICES
      traefik.http.services.plex-app.loadbalancer.server.port: 32400


#############################
########## api-app ##########
#############################
  api-app:
    profiles:
      - $API_PROFILE_NAME
    build: ./config/fastapi/
    image: api-app:latest
    container_name: fastapi
    restart: unless-stopped
    networks:
      - nw-traefik
    dns:
      - 1.1.1.1
      - 1.0.0.1
    depends_on:
      cloud-app:
        condition: service_healthy
    healthcheck:
      test: wget -q --spider http://localhost/health
      interval: ${HEALTHCHECK_INTERVAL:-30s}
      timeout: ${HEALTHCHECK_TIMEOUT:-30s}
    volumes:
      - $DATA_PATH/$API_DATA:/code/app/sub_app
    environment:
      # DYNAMIC
      TZ: ${TZ}
      API_KEY: ${API_KEY}
      API_KEY_NAME: ${API_KEY_NAME}
      COOKIE_DOMAIN: ${API_ALIAS}.${DOMAIN}
    labels:
      traefik.enable: true
      # ROUTERS
      traefik.http.routers.api-app.tls: true
      traefik.http.routers.api-app.tls.certresolver: ${ENV}
      traefik.http.routers.api-app.rule: "Host(`${API_ALIAS}.${DOMAIN}`)"


##############################
########## networks ##########
##############################
networks:
  nw-traefik:
